/* src/App.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "../_snowpack/pkg/svelte/internal.js";

function create_fragment(ctx) {
	let h1;
	let t1;
	let button;
	let t2;
	let t3;
	let t4;
	let p0;
	let t5;
	let t6;
	let t7;
	let t8;
	let p1;
	let t9;
	let mounted;
	let dispose;

	return {
		c() {
			h1 = element("h1");
			h1.textContent = "10進数・16進数変換ツール";
			t1 = space();
			button = element("button");
			t2 = text("Count: ");
			t3 = text(/*count*/ ctx[0]);
			t4 = space();
			p0 = element("p");
			t5 = text(/*count*/ ctx[0]);
			t6 = text(" * 2 = ");
			t7 = text(/*doubled*/ ctx[1]);
			t8 = space();
			p1 = element("p");
			t9 = text(/*hex_val*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			insert(target, t1, anchor);
			insert(target, button, anchor);
			append(button, t2);
			append(button, t3);
			insert(target, t4, anchor);
			insert(target, p0, anchor);
			append(p0, t5);
			append(p0, t6);
			append(p0, t7);
			insert(target, t8, anchor);
			insert(target, p1, anchor);
			append(p1, t9);

			if (!mounted) {
				dispose = listen(button, "click", /*handleClick*/ ctx[3]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*count*/ 1) set_data(t3, /*count*/ ctx[0]);
			if (dirty & /*count*/ 1) set_data(t5, /*count*/ ctx[0]);
			if (dirty & /*doubled*/ 2) set_data(t7, /*doubled*/ ctx[1]);
			if (dirty & /*hex_val*/ 4) set_data(t9, /*hex_val*/ ctx[2]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(button);
			if (detaching) detach(t4);
			if (detaching) detach(p0);
			if (detaching) detach(t8);
			if (detaching) detach(p1);
			mounted = false;
			dispose();
		}
	};
}

function convToHex(a) {
	let b = parseInt(a);
	return b.toString(16);
}

function convToDecimal(val) {
	// 16進→10進
	let s = val.toLowerCase();

	let ret = 0;
	let count = s.length;

	for (i = 0; i < count; i++) {
		n = s.charAt(L - i - 1);

		for (j = 0; j < 16; j++) {
			if (c == ar[j]) {
				ret += (j + 1) * Math.pow(16, i);
				break;
			}
		}
	}

	return ret;
}

function instance($$self, $$props, $$invalidate) {
	let doubled;
	let hex_val;
	let count = 1;

	function handleClick() {
		$$invalidate(0, count += 1);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*count*/ 1) {
			// the `$:` means 're-run whenever these values change'
			$: $$invalidate(1, doubled = count * 2);
		}

		if ($$self.$$.dirty & /*count*/ 1) {
			$: $$invalidate(2, hex_val = convToHex(count));
		}
	};

	return [count, doubled, hex_val, handleClick];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;