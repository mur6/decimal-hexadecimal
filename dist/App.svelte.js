/* src/App.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	space,
	text
} from "../_snowpack/pkg/svelte/internal.js";

function create_fragment(ctx) {
	let h1;
	let t1;
	let div0;
	let p0;
	let t3;
	let p1;
	let t4;
	let input0;
	let p2;
	let p3;
	let t5;
	let t6;
	let t7;
	let hr;
	let t8;
	let div1;
	let p4;
	let t10;
	let p5;
	let t11;
	let input1;
	let t12;
	let p6;
	let t13;
	let t14;
	let mounted;
	let dispose;

	return {
		c() {
			h1 = element("h1");
			h1.textContent = "10進数・16進数変換ツール";
			t1 = space();
			div0 = element("div");
			p0 = element("p");
			p0.textContent = "10=>16 変換";
			t3 = space();
			p1 = element("p");
			t4 = text("10進数");
			input0 = element("input");
			p2 = element("p");
			p3 = element("p");
			t5 = text("16進数: ");
			t6 = text(/*hex_converted*/ ctx[2]);
			t7 = space();
			hr = element("hr");
			t8 = space();
			div1 = element("div");
			p4 = element("p");
			p4.textContent = "16=>10 変換";
			t10 = space();
			p5 = element("p");
			t11 = text("16進数:");
			input1 = element("input");
			t12 = space();
			p6 = element("p");
			t13 = text("10進数:");
			t14 = text(/*decimal_converted*/ ctx[3]);
			attr(input0, "placeholder", "0");
			attr(input1, "placeholder", "0");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			insert(target, t1, anchor);
			insert(target, div0, anchor);
			append(div0, p0);
			append(div0, t3);
			append(div0, p1);
			append(p1, t4);
			append(p1, input0);
			set_input_value(input0, /*decimal_value*/ ctx[0]);
			append(div0, p2);
			append(div0, p3);
			append(p3, t5);
			append(p3, t6);
			insert(target, t7, anchor);
			insert(target, hr, anchor);
			insert(target, t8, anchor);
			insert(target, div1, anchor);
			append(div1, p4);
			append(div1, t10);
			append(div1, p5);
			append(p5, t11);
			append(p5, input1);
			set_input_value(input1, /*hex_value*/ ctx[1]);
			append(div1, t12);
			append(div1, p6);
			append(p6, t13);
			append(p6, t14);

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler*/ ctx[4]),
					listen(input1, "input", /*input1_input_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*decimal_value*/ 1 && input0.value !== /*decimal_value*/ ctx[0]) {
				set_input_value(input0, /*decimal_value*/ ctx[0]);
			}

			if (dirty & /*hex_converted*/ 4) set_data(t6, /*hex_converted*/ ctx[2]);

			if (dirty & /*hex_value*/ 2 && input1.value !== /*hex_value*/ ctx[1]) {
				set_input_value(input1, /*hex_value*/ ctx[1]);
			}

			if (dirty & /*decimal_converted*/ 8) set_data(t14, /*decimal_converted*/ ctx[3]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(div0);
			if (detaching) detach(t7);
			if (detaching) detach(hr);
			if (detaching) detach(t8);
			if (detaching) detach(div1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function convToHex(a) {
	let b = parseInt(a);
	return b.toString(16);
}

function convToDecimal(val) {
	const hextable = new Array("1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f");
	let s = val.toString().toLowerCase();
	let ret = 0;
	let charLength = s.length;

	for (let i = 0; i < charLength; i++) {
		let c = s.charAt(charLength - i - 1);

		for (let j = 0; j < 16; j++) {
			if (c == hextable[j]) {
				ret += (j + 1) * Math.pow(16, i);
				break;
			}
		}
	}

	return ret;
}

function instance($$self, $$props, $$invalidate) {
	let hex_converted;
	let decimal_converted;
	let decimal_value = 0;
	let hex_value = 0;

	function input0_input_handler() {
		decimal_value = this.value;
		$$invalidate(0, decimal_value);
	}

	function input1_input_handler() {
		hex_value = this.value;
		$$invalidate(1, hex_value);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*decimal_value*/ 1) {
			$: $$invalidate(2, hex_converted = convToHex(decimal_value));
		}

		if ($$self.$$.dirty & /*hex_value*/ 2) {
			$: $$invalidate(3, decimal_converted = convToDecimal(hex_value));
		}
	};

	return [
		decimal_value,
		hex_value,
		hex_converted,
		decimal_converted,
		input0_input_handler,
		input1_input_handler
	];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;